# nginx config file

# @TODO https://www.nginx.com/resources/wiki/start/topics/examples/SSL-Offloader/

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.
worker_processes     auto;
# Better priority than other processes
worker_priority      0;
# In case the amount of CPUs is known, we can explicitly point a worker to a CPU
# @see http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity
worker_cpu_affinity  auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

pid                  /var/run/nginx.pid;

events {
	worker_connections 4096;
	multi_accept       on;
	use                epoll;
}

stream {

	upstream mongodb_servers {
		server  mongodb:27017;
	}

	server {
		listen      27017;
		proxy_pass  mongodb_servers;
	}

}

http {

	# Hide nginx version information.
	server_tokens off;

	default_type application/octet-stream;
	include global/mime.types;
	include global/directive-only/charset.conf;
	#include global/directive-only/gzip.conf;
	include global/directive-only/log.format.conf;
	#include global/directive-only/cookies.conf;
	#include global/directive-only/proxy-cache.conf;
	#include global/directive-only/extra-security.conf;

	# Enable nginx error pages for response code â‰¥ 300 using "error_page" directive
	#proxy_intercept_errors on;

	# Speed up file transfers by using sendfile() to copy directly
	# between descriptors rather than using read()/write()
	# @DEBUG Set to `off` when debugging to avoid cache
	sendfile off;

	## Timeouts
	# How long the connection is allowed to stay idle and alive
	keepalive_timeout     30  30;
	client_header_timeout 10;
	client_body_timeout   30;
	# Between two operations
	send_timeout          30;

	# Maximum upload size
	#client_max_body_size ${NGINX_UPLOAD_LIMIT};

	# Tell Nginx not to send out partial frames; this increases throughput
	# since TCP frames are filled up before being sent out. (adds TCP_CORK)
	tcp_nopush  on;

	# Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
	# collates several smaller packets together into one larger packet, thus saving
	# bandwidth at the cost of a nearly imperceptible increase to latency. (removes TCP_NODELAY)
	tcp_nodelay off;

	# Nginx will silently drop HTTP headers with underscores
	# This is done in order to prevent ambiguities when mapping headers to CGI variables as both dashes
	# and underscores are mapped to underscores during that process.
	underscores_in_headers on;

	# this seems to be required for some vhosts
	server_names_hash_bucket_size 128;

	disable_symlinks off;

	# Index order
	index index.php index.html index.htm;

	upstream web_servers {
		least_conn;
		server    docker.dev:80 max_fails=2 fail_timeout=10s;
		server    docker.dev:81 max_fails=2 fail_timeout=10s;
		# Activate the cache for connections to upstream servers
		# Sets the maximum number of idle keepalive connections to upstream servers
		# that are preserved in the cache of each worker process
		keepalive 25;
	}

	upstream phpfpm_servers {
		least_conn;
		server    php:9000 max_fails=2 fail_timeout=10s;
		server    php:9001 max_fails=2 fail_timeout=10s;
		# Only allowed after setting the load balancing method
		keepalive 25;
	}

	upstream nodejs_servers {
		least_conn;
		server docker.dev:3000 max_fails=2 fail_timeout=10s;
		keepalive 25;
	}

	server {
		listen 80 default_server;
		listen [::]:80 default_server ipv6only=on;

		# Respond to all requests
		server_name _;

		include     global/location/favicons.conf;

		set         $site_root  /var/www/$host;
		set         $log_root   var/log/nginx/$host;

		include     global/directive-only/log.cache.conf;
		include     global/directive-only/log.verbose.conf;

		# Not possible to use variables for error_log
		error_log   /var/log/nginx/proxy.error.log  debug;
		access_log  /$log_root/proxy.access.log     full;

		error_page  404 =404 /40x.html;

		#client_max_body_size        10m;
		#client_header_buffer_size   1k;
		#client_body_buffer_size     128k;

		location /node {
			proxy_pass         http://nodejs_servers;
			proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection 'upgrade';
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
		}

		location ~* (\.php)$ {
			root              /$site_root;

	        fastcgi_pass      phpfpm_servers;

	        #if (!-f $document_root$fastcgi_script_name) {
	        #    return 404;
	        #}
	        fastcgi_keep_conn on;

	        fastcgi_index     index.php;
			try_files         $uri  $uri/  /index.php;
	        #fastcgi_split_path_info ^(.+?\.php)(/.*)$;

	        include           /etc/nginx/fastcgi_params;
	        fastcgi_param     SCRIPT_FILENAME $document_root$fastcgi_script_name;
	        # Fixes $_SERVER["REMOTE_ADDR"] to equal "HTTP_X_REAL_IP" and "HTTP_X_FORWARDED_FOR" values
	        fastcgi_param     REMOTE_ADDR $http_x_real_ip;

	        #include global/location/proxy.conf;
	    }

		location /40x.html {
			root       /$site_root/errors;
			internal;
			error_page 404 =404 @fallback_404;
		}

		# In case there were no site-specific error files
		location @fallback_404 {
			root      /$site_root;
			try_files /40x.html =404;
			internal;
		}

		location / {
			root      $site_root;
			try_files $uri $uri/ @webproxy;
		}

		location @webproxy {
			# Add cache zone and header to show the cache status
			#proxy_cache              static;

			# Send requests to upstream servers array
			proxy_pass               http://web_servers;

			#include global/location/proxy.conf;
		}
	}

	# server{} configuration files should be placed in the sites-available folder
	#include sites-enabled/*;
}